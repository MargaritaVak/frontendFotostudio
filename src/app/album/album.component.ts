import { Component, OnInit } from '@angular/core';import {AlbumService} from "../service/album.service";import {ActivatedRoute} from "@angular/router";import {TokenStorageService} from "../service/token-storage.service";import {UserService} from "../service/user.service";import {SpecialistService} from "../service/specialist.service";import {DomSanitizer} from "@angular/platform-browser";@Component({  selector: 'app-album',  templateUrl: './album.component.html',  styleUrls: ['./album.component.css']})export class AlbumComponent implements OnInit {  isSpecialist: boolean = false;  albumAdded: boolean = false;  showAlbumForm: boolean = false;  newAlbumName:any;  albumPhotos: string[] = [];  selectedFiles!: File[];  isLoggedIn = false;  orderId!: string;  album: any;  showAlbumUPForm=false;  constructor(private albumService: AlbumService, private route: ActivatedRoute, private tokenStorageService: TokenStorageService, private userService: UserService, private specialistService: SpecialistService, public sanitizer: DomSanitizer) { }  ngOnInit(): void {    this.isLoggedIn = !!this.tokenStorageService.getToken();    this.isSpecialist = this.tokenStorageService.isSpecialist();    const orderId = this.route.snapshot.paramMap.get('id');    console.log(orderId)    if (orderId !== null) {      this.orderId = orderId.toString();    }    this.getAlbum()  }  getAlbum(){    this.albumService.getAlbum(this.orderId).subscribe((album) => {      this.album = album;      console.log(this.album);      if(album!=null ) {        this.albumAdded = true;      }    });  }  addAlbum(): void {    if (this.newAlbumName && this.selectedFiles) {      this.albumService.addAlbum(        this.orderId,        this.newAlbumName,        this.selectedFiles      ).subscribe(        (response: any) => {          console.log('Album added successfully', response);        },        (error: any) => {          console.log(error);        }      );      alert('Service added successfully')      location.reload()      this.getAlbum()      this.albumAdded =true;    }    this.selectedFiles = [];    location.reload()  }  upAlbum(id: any):void{    this.albumService.updatePhoto(id,this.selectedFiles).subscribe(      (response) => {        console.log('Portfolio updated successfully:', response);        location.reload()      },      (error) => {        console.error('Error updating portfolio:', error);      }    );    this.selectedFiles =[];    this.showAlbumUPForm = false;    location.reload()  }  handlePhotoUpload(event: any): void {    this.selectedFiles = event.target.files;  }  toggleAlbumForm(): void {    this.showAlbumForm = !this.showAlbumForm;  }  toggleAlbumAddForm(): void {    this.showAlbumUPForm = !this.showAlbumUPForm;  }  deleteAllPhotos(id: any): void {    this.albumService.deleteAlbum(id).subscribe(      (response) => {        console.log('Album delete successfully:', response);        location.reload()        this.showAlbumForm = false      },      (error) => {        console.error('Error delete:', error);      }    );  }}
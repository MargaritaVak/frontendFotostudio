import {Component, OnInit} from '@angular/core';import {TokenStorageService} from "../service/token-storage.service";import {UserService} from "../service/user.service";import {CalendarDay} from "../models/calendar";import {DomSanitizer} from "@angular/platform-browser";import {OrderService} from "../service/order.service";import {ClientService} from "../service/client.service";import {Router} from "@angular/router";import { Location } from '@angular/common';// @ts-ignore@Component({  selector: 'app-personal-account-client',  templateUrl: './personal-account-client.component.html',  styleUrls: ['./personal-account-client.component.css']})export class PersonalAccountClientComponent implements OnInit {  user: any;  name!: string;  fileObj!: File;  fileUrl!: string;  calendarOrderData: any[] = [];  orders: any[] = [];  public calendar: CalendarDay[] = [];  public monthNames = ["January", "February", "March", "April", "May", "June",    "July", "August", "September", "October", "November", "December"  ];  public displayMonth!: string;  private monthIndex: number = 0;  private id_client!: string;  public showControls: boolean = false;  public showCalendar: boolean = false;  public showOrders: boolean = false;  public showControlsOrder: boolean = false;  showEditProfile = false;  showEditName = false;  showEditPhoto = false;  showContextMenu: boolean = false;  // Функция для отображения/скрытия контекстного меню  toggleContextMenu(): void {    this.showContextMenu = !this.showContextMenu;    console.log('menu')  }  constructor(public router: Router, private clientService: ClientService,              private orderService: OrderService, private tokenService: TokenStorageService,              private userService: UserService, public sanitizer: DomSanitizer) {  }  ngOnInit(): void {    this.name = '';    this.getUser();    this.generateCalendarDays(this.monthIndex);  }  openContextMenu(event: MouseEvent): void {    event.preventDefault();    console.log('Update photo');    // Создаем элемент контекстного меню    const contextMenu = document.createElement('div');    contextMenu.classList.add('context-menu');    // Добавляем пункты меню    const menuItem1 = document.createElement('div');    menuItem1.innerText = 'Update photo';    menuItem1.addEventListener('click', () => {      console.log('Update photo');    });    contextMenu.appendChild(menuItem1);    const menuItem2 = document.createElement('div');    menuItem2.innerText = 'Delete photo';    menuItem2.addEventListener('click', () => {      console.log('Delete photo');    });    contextMenu.appendChild(menuItem2);    // Позиционируем контекстное меню    contextMenu.style.position = 'absolute';    contextMenu.style.left = `${event.clientX}px`;    contextMenu.style.top = `${event.clientY}px`;    // Добавляем контекстное меню в DOM    document.body.appendChild(contextMenu);    // Обработчик события клика за пределами контекстного меню для его закрытия    const clickOutsideHandler = (event: MouseEvent) => {      if (!contextMenu.contains(event.target as Node)) {        document.body.removeChild(contextMenu);        document.removeEventListener('click', clickOutsideHandler);      }    };    // Добавляем обработчик события клика за пределами контекстного меню    document.addEventListener('click', clickOutsideHandler);  }  getUser(): void {    const userId = this.tokenService.getUserId();    this.userService.getClient(userId).subscribe(      data => {        this.user = data;        console.log(this.user);        const id = this.user.id        this.orderService.getOrdersClient(id).subscribe(          orders => {            this.orders = orders;          },          error => {            console.log(error);          }        );        this.clientService.getCalendarClient(id)          .subscribe(            data => {              this.calendarOrderData = data;              this.updateCalendar();            },            error => {              console.error('An error occurred while retrieving calendar data:', error);            }          );      },      error => {        console.log(error);      }    );  }  private updateCalendar() {    for (const order of this.calendarOrderData) {      const orderDate = new Date(order.date_time); // Предполагается, что в данных есть поле 'date', содержащее дату заказа      const calendarDay = this.calendar.find(day => day.date.setHours(0, 0, 0, 0) === orderDate.setHours(0, 0, 0, 0));      if (calendarDay) {        calendarDay.title = order.id_order; // Предполагается, что в данных есть поле 'orderNumber', содержащее номер заказа      }    }  }  private generateCalendarDays(monthIndex: number): void {    // we reset our calendar    this.calendar = [];    // we set the date    let day: Date = new Date(new Date().setMonth(new Date().getMonth() + monthIndex));    // set the dispaly month for UI    this.displayMonth = this.monthNames[day.getMonth()];    let startingDateOfCalendar = this.getStartDateForCalendar(day);    let dateToAdd = startingDateOfCalendar;    for (var i = 0; i < 31; i++) {      this.calendar.push(new CalendarDay(new Date(dateToAdd)));      dateToAdd = new Date(dateToAdd.setDate(dateToAdd.getDate() + 1));    }  }  private getStartDateForCalendar(selectedDate: Date) {    // for the day we selected let's get the previous month last day    let lastDayOfPreviousMonth = new Date(selectedDate.setDate(1));    // start by setting the starting date of the calendar same as the last day of previous month    let startingDateOfCalendar: Date = lastDayOfPreviousMonth;    // but since we actually want to find the last Monday of previous month    // we will start going back in days intil we encounter our last Monday of previous month    if (startingDateOfCalendar.getDay() != 1) {      do {        startingDateOfCalendar = new Date(startingDateOfCalendar.setDate(startingDateOfCalendar.getDate() - 1));      } while (startingDateOfCalendar.getDay() != 1);    }    return startingDateOfCalendar;  }  showEditProfileFun(): void {    this.showEditProfile = !this.showEditProfile;  }  showEditPhotoFun():void {    this.showEditPhoto = !this.showEditPhoto;  }  showEditNameFun():void {    this.showEditName = !this.showEditName;  }  public increaseMonth() {    this.monthIndex++;    this.generateCalendarDays(this.monthIndex);  }  public decreaseMonth() {    this.monthIndex--    this.generateCalendarDays(this.monthIndex);  }  public setCurrentMonth() {    this.monthIndex = 0;    this.generateCalendarDays(this.monthIndex);  }  public showCalendarControls() {    this.showControls = true;  }  public hideCalendarControls() {    this.showControls = false;  }  public showOrdersControls() {    this.showControlsOrder = true;  }  public hideOrdersControls() {    this.showControlsOrder = false;  }  onFilePicked(event: Event): void {    console.log(event);    const fileInput = event.target as HTMLInputElement;    if (fileInput.files && fileInput.files.length > 0) {      this.fileObj = fileInput.files[0];      console.log(this.fileObj);    }  }  onFileUpload() {    if (!this.fileObj) {      return    }    const userId = this.tokenService.getUserId();    this.userService.getClient(userId).subscribe(      async data => {        this.user = data;        console.log(this.user);        const id = this.user.id        console.log(id)        const fileForm = new FormData();        console.log(this.fileObj);        fileForm.append('file', this.fileObj);        const foundFile = fileForm.get('file');        console.log(foundFile);        this.userService.updateClientPhoto(id,fileForm).subscribe(res => {          console.log('Client name updated successfully');        });        alert('Successful');        location.reload();      },      error => {        console.log(error);      }    );  }  deletePhoto(){    const userId = this.tokenService.getUserId();    this.userService.getClient(userId).subscribe(      async data => {        this.user = data;        console.log(this.user);        const id = this.user.id        this.userService.deleteClientPhoto(id) .subscribe(          () => {            console.log('Client photo delete');            alert('Successful');            location.reload();          },          error => {            console.error('Error: ', error);            alert('Error: ' + error);          }        );      },      error => {        console.log(error);      }    );  }  updateClient() {    const name = this.name;    const userId = this.tokenService.getUserId();    this.userService.getClient(userId).subscribe(      async data => {        this.user = data;        console.log(this.user);        const id = this.user.id        console.log(id, name)        this.userService.updateUser(id, name)          .subscribe(            () => {              console.log('Client name updated successfully');              alert('Successful');              this.showEditName =false;              location.reload();            },            error => {              console.error('Error updating client name:', error);              alert('Error: ' + error);            }          );      },      error => {        console.log(error);      }    );  }}